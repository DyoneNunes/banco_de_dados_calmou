import psycopg2
from psycopg2 import Error
import os
from dotenv import load_dotenv

# ‚úÖ Carrega vari√°veis de ambiente do arquivo .env
load_dotenv()

def conectar():
    """
    Fun√ß√£o para conectar ao banco de dados PostgreSQL.
    Usa vari√°veis de ambiente para credenciais de seguran√ßa.
    """
    try:
        conexao = psycopg2.connect(
            user=os.getenv("POSTGRES_USER", "postgres"),
            password=os.getenv("POSTGRES_PASSWORD"),  # ‚úÖ OBRIGAT√ìRIO via .env
            host=os.getenv("POSTGRES_HOST", "localhost"),
            port=os.getenv("POSTGRES_PORT", "5432"),
            database=os.getenv("POSTGRES_DB", "calmou")
        )
        return conexao
    except (Exception, Error) as error:
        # Este print de erro √© importante e deve ficar
        print(f"‚ùå Erro ao conectar ao PostgreSQL: {error}")
        return None

# ‚úÖ OPCIONAL: Implementa√ß√£o com pool de conex√µes (mais eficiente)
# Descomente para usar em produ√ß√£o
"""
from psycopg2 import pool

# Pool de conex√µes global
connection_pool = None

def inicializar_pool():
    '''Inicializa o pool de conex√µes.'''
    global connection_pool
    try:
        connection_pool = pool.SimpleConnectionPool(
            1,  # M√≠nimo de conex√µes
            20,  # M√°ximo de conex√µes
            user=os.getenv("POSTGRES_USER", "postgres"),
            password=os.getenv("POSTGRES_PASSWORD"),
            host=os.getenv("POSTGRES_HOST", "localhost"),
            port=os.getenv("POSTGRES_PORT", "5432"),
            database=os.getenv("POSTGRES_DB", "calmou")
        )
        if connection_pool:
            print("‚úÖ Pool de conex√µes criado com sucesso!")
    except (Exception, Error) as error:
        print(f"‚ùå Erro ao criar pool de conex√µes: {error}")

def conectar_com_pool():
    '''Obt√©m uma conex√£o do pool.'''
    global connection_pool
    try:
        if connection_pool is None:
            inicializar_pool()
        
        if connection_pool:
            return connection_pool.getconn()
        return None
    except (Exception, Error) as error:
        print(f"‚ùå Erro ao obter conex√£o do pool: {error}")
        return None

def liberar_conexao(conn):
    '''Retorna a conex√£o ao pool.'''
    global connection_pool
    try:
        if connection_pool and conn:
            connection_pool.putconn(conn)
    except (Exception, Error) as error:
        print(f"‚ùå Erro ao liberar conex√£o: {error}")

def fechar_pool():
    '''Fecha todas as conex√µes do pool.'''
    global connection_pool
    try:
        if connection_pool:
            connection_pool.closeall()
            print("‚úÖ Pool de conex√µes fechado!")
    except (Exception, Error) as error:
        print(f"‚ùå Erro ao fechar pool: {error}")
"""

# Bloco de teste para este arquivo
if __name__ == '__main__':
    print("üîç Testando conex√£o com o banco de dados...")
    print(f"üìç Conectando em: {os.getenv('POSTGRES_HOST', 'localhost')}:{os.getenv('POSTGRES_PORT', '5432')}")
    print(f"üóÑÔ∏è  Banco de dados: {os.getenv('POSTGRES_DB', 'calmou')}")
    print(f"üë§ Usu√°rio: {os.getenv('POSTGRES_USER', 'postgres')}")
    
    conn = conectar()
    if conn:
        print("‚úÖ Teste de conex√£o direta bem-sucedido!")
        
        # Teste adicional: verifica vers√£o do PostgreSQL
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            db_version = cursor.fetchone()
            print(f"üêò PostgreSQL version: {db_version[0]}")
            cursor.close()
        except Exception as e:
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel obter vers√£o do PostgreSQL: {e}")
        
        conn.close()
    else:
        print("‚ùå Teste de conex√£o direta falhou.")
        print("\nüí° Dicas:")
        print("   1. Verifique se o PostgreSQL est√° rodando")
        print("   2. Verifique as credenciais no arquivo .env")
        print("   3. Verifique se o banco 'calmou' existe")